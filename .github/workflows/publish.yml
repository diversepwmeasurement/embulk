jobs:
  publish:
    environment:
      name: maven-central-and-ruby-gems
    permissions:
      contents: write
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up OpenJDK 8
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 8
    - continue-on-error: true
      name: Get the tag
      run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - continue-on-error: true
      name: Print the tag
      run: echo "${{ env.GIT_TAG }}"
    - continue-on-error: true
      name: Build
      run: ./gradlew executable embulk-core:jar embulk-deps:jar embulk-junit4:jar
        embulk-ruby:gem
    - continue-on-error: true
      name: Create a GitHub Release
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: "try {\n  const response = await github.rest.repos.createRelease({\n\
          \    draft: false,\n    generate_release_notes: false,\n    name: 'Release\
          \ ${{ env.GIT_TAG }}',\n    owner: context.repo.owner,\n    prerelease:\
          \ false,\n    repo: context.repo.repo,\n    tag_name: '${{ env.GIT_TAG }}',\n\
          \  });\n  core.exportVariable('RELEASE_ID', response.data.id);\n  core.exportVariable('RELEASE_UPLOAD_URL',\
          \ response.data.upload_url);\n} catch (error) {\n  core.setFailed(error.message);\n\
          }\n"
    - continue-on-error: true
      name: Print the RELEASE_ID
      run: echo "${{ env.RELEASE_ID }}"
    - continue-on-error: true
      name: Print the RELEASE_UPLOAD_URL
      run: echo "${{ env.RELEASE_UPLOAD_URL }}"
    - continue-on-error: true
      name: Upload the executable JAR as an Asset in GitHub Release
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: "const fs = require('fs');\nconst path = require('path');\nconst version\
          \ = '${{ env.GIT_TAG }}'.substring(1);\nconst filename = 'embulk-'.concat(version,\
          \ '.jar');\nconst localPath = path.join(path.resolve(process.env.GITHUB_WORKSPACE),\
          \ 'build', 'executable', filename);\nconsole.log(localPath);\nawait github.rest.repos.uploadReleaseAsset({\n\
          \  owner: context.repo.owner,\n  repo: context.repo.repo,\n  release_id:\
          \ ${{ env.RELEASE_ID }},\n  name: filename,\n  data: await fs.promises.readFile(localPath)\n\
          });\n"
    - continue-on-error: true
      env:
        ORG_GRADLE_PROJECT_ossrhPassword: ${{ secrets.OSSRH_PASSWORD }}
        ORG_GRADLE_PROJECT_ossrhUsername: ${{ vars.OSSRH_USERNAME }}
        ORG_GRADLE_PROJECT_signingKey: ${{ secrets.GPG_PRIVATE_KEY_ARMOR }}
        ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPG_PRIVATE_KEY_PASSWORD }}
      name: Publish the Maven artifacts
      run: ./gradlew --stacktrace embulk-core:publishMavenPublicationToMavenCentralRepository
        embulk-deps:publishMavenPublicationToMavenCentralRepository embulk-junit4:publishMavenPublicationToMavenCentralRepository
    - continue-on-error: true
      env:
        RUBYGEMS_API_KEY: ${{secrets.RUBYGEMS_API_KEY}}
      name: Publish the Ruby gem
      run: 'mkdir -p $HOME/.gem

        touch $HOME/.gem/credentials

        chmod 0600 $HOME/.gem/credentials

        printf -- "---\n:rubygems_api_key: ${RUBYGEMS_API_KEY}\n" > $HOME/.gem/credentials

        ./gradlew --stacktrace embulk-ruby:gemPush

        '
    strategy:
      fail-fast: true
name: Publish
on:
  repository_dispatch:
    types: trigger-ga___publish.yml
